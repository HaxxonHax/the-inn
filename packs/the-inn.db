{"_id":"FLHMXWBO4ChPtl8c","name":"View My Cards","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Display Cards from the Character's Main Deck.\n */\n// viewMyCards()\n// Macro Name: View My Cards\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n  const handSuffix = 'Hand';\n\n  console.log(`${gameName} | View My Cards`);\n\n  const handName = `${game.user.character.name} ${handSuffix}`;\n  const discardName = `${game.user.character.name} ${mainDeckBaseName} ${discardDeckSuffix}`\n  const deckName = `${game.user.character.name} ${mainDeckBaseName} ${deckSuffix}`\n\n  const playerHand = game.cards.getName(handName);\n  const playerDiscard = game.cards.getName(discardName);\n  const playerDeck = game.cards.getName(deckName);\n\n  if (playerHand) {\n    playerHand.sheet.render(true);\n  } else {\n    new Dialog({\n      title: \"Deck not found!\",\n      content: `<div>Unable to find Deck!  Ensure GM has created ${handName}, ${deckName}, and ${discardName} decks.</div>`,\n        buttons: {\n        ok: {\n          icon: \"<i class='fas fa-times'></i>\",\n          label: `OK`\n        },\n      },\n      default: \"ok\",\n    }).render(true);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{}}
{"_id":"M6ZA3EVL20Pdq2a9","name":"Play A Card","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Plays a selected card from the character's hand and moves it into the character's discard pile.\n */\n// playACard()\n// Macro Name: Play A Card\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n  const handSuffix = 'Hand';\n\n  console.log(`${gameName} | Play a Card`);\n\n  function updatePlayTileWithCard(cardId, hand, passTo, character) {\n    let playedCard = hand.data.cards.get(cardId);\n    let cardImg = playedCard.img;\n    let cardName = playedCard.name;\n    let calledMacro = game.macros.getName(\"Update Tile Image\");\n    // hand.playDialog(hand.data.cards.get(cardId));\n    hand.pass(passTo, [cardId], {action: \"play\", chatNotification: false});\n    ChatMessage.create({\n      content: `<div>${character.name} played ${cardName}</div>`,\n    });\n    calledMacro.execute(cardImg,\"Play\",character.name);\n  }\n\n\n  let characterHandName = `${game.user.character.name} ${handSuffix}`;\n  let characterMainDiscardName = `${game.user.character.name} ${mainDeckBaseName} ${discardDeckSuffix}`;\n  let doPlayCard = false;\n\n  let hand = game.cards.getName(characterHandName);\n  let passTo = game.cards.getName(characterMainDiscardName);\n  let dialogContent = \"\";\n  let dialogContentHead = `\n      <div>Play which card?</div>\n      <form>\n        <div class=\"form-group\">\n          <select id=\"selected-card\" name=\"selected-card\">`;\n  let dialogOptions = \"\";\n  let dailogContentFooter = `          </select>\n        </div>\n      </form>`;\n\n  if (typeof hand !== 'undefined' && typeof passTo !== 'undefined') {\n    hand.data.cards.forEach(function(element) { \n      dialogOptions = dialogOptions + '<option value=\"' + element.data._id + '\">' + element.data.name + \"</option>\";\n    });\n    dialogContent = dialogContentHead + dialogOptions + dailogContentFooter;\n    new Dialog({\n      title: \"Play a Card\",\n      content: dialogContent,\n      buttons: {\n        play: {\n          icon: \"<i class='fas fa-check'></i>\",\n          label: `Play Card`,\n          callback: () => doPlayCard = true\n        },\n        cancel: {\n          icon: \"<i class='fas fa-times'></i>\",\n          label: `Cancel`\n        },\n      },\n      default: \"cancel\",\n      close: html => {\n          if (doPlayCard) {\n            let selectedCardID = html.find('[name=\"selected-card\"]')[0].value || null;\n            if(selectedCardID) {\n              updatePlayTileWithCard(selectedCardID, hand, passTo, game.user.character);\n            }\n          }\n        }\n    }).render(true);\n  }\n  else {\n    new Dialog({\n      title: \"Deck not found!\",\n      content: `<div>Unable to find Decks!  Ensure GM has created \"` + handName + `\" and \"` + passToName + `\" decks.</div>`,\n      buttons: {\n        ok: {\n          icon: \"<i class='fas fa-times'></i>\",\n          label: `OK`\n        },\n      },\n      default: \"ok\",\n    }).render(true);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{}}
{"_id":"aX5IP9ZeAajS1AQo","name":"Shuffle Character Deck","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Shuffle the character's main deck.\n */\n// shuffleCharacterDeck()\n// Macro Name: Shuffle Character Deck\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n\n  const shuffleDeckMacro = \"Shuffle Deck\";\n\n  console.log(`${gameName} | Shuffle Character Deck`)\n\n  let calledMacro = null;\n\n\n  const deckToShuffle = `${game.user.character.name} ${mainDeckBaseName} ${deckSuffix}`;\n  const discardDeckName = `${game.user.character.name} ${mainDeckBaseName} ${discardDeckSuffix}`;\n  let doTheShuffle = false;\n  let chatText = '';\n\n  let dialogContent = `\n      <div>Shuffle Deck</div>\n      <form>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" id=\"collect-discards\" name=\"collect-discards\">\n          <label for=\"collect-discards\">Collect Discards</label><br>\n        </div>\n      </form>`;\n\n  new Dialog({\n    title: `Shuffle ${deckToShuffle}`,\n    content: dialogContent,\n    buttons: {\n      play: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Shuffle!`,\n        callback: () => doTheShuffle = true\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel`\n      },\n    },\n    default: \"cancel\",\n    close: html => {\n      if (doTheShuffle) {\n        let collectDiscards = html.find('[name=\"collect-discards\"]')[0].checked;\n        if (collectDiscards) {\n          chatText = chatText + `<div>${game.user.character.name} collected the ${discardDeckName}s.</div>`\n          console.log(`[${gameName}] Collecting discards from ${discardDeckName} for ${deckToShuffle}`);\n          calledMacro = game.macros.getName(\"Collect Discards\");\n          calledMacro.execute(deckToShuffle,discardDeckName);\n        }\n        calledMacro = game.macros.getName(shuffleDeckMacro);\n        calledMacro.execute(deckToShuffle, true);\n        console.log(deckToShuffle + \"has been shuffled.\");\n        ChatMessage.create({\n          user: game.user,\n          content: chatText + `<div>${game.user.character.name} shuffled ${deckToShuffle}.</div>`,\n        });\n      }\n    }\n  }).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{}}
{"_id":"cb6RHSmkgoUgGtO1","name":"Update My Stat","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Updates the given stat for an character.  Calls the \"Update Character Stat\" macro.\n * @param {string}      statName            The name of the stat to adjust (e.g. \"Fortitude\").\n * @param {int}         amountToUpdateBy    The amount to add to the stat.\n * @param {string}      ownedCharacterName  (optional) The name of the character that owns the stat.\n * @returns Promise                         All macros return promise.\n */\n\n// updateMyStat(statName, amountToUpdateBy, ownedCharacterName)\n// Macro Name: Update My Stat\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\";\n\n  console.log(`${gameName} | Update My Stat`)\n\n  if (args.length > 1) {\n    // Here we support both any character and named character checking via parameters.\n    if (args.length > 2) {\n      if (game.user.character.name !== args[2]) return\n    }\n    const statToUpdate = args[0];\n    const amountToUpdateBy = args[1];\n    const statMacro = game.macros.getName(\"Update Character Stat\");\n    statMacro.execute(amountToUpdateBy,statToUpdate,game.user.character.name);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{}}
{"_id":"eMQN0NtSQftzDDuX","name":"End Turn","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Ends the player's turn and moves to the next one in the combat tracker.\n */\n// endTurn()\n// Macro Name: End Turn\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n  const globalDrinkDeckName = `${gameName} ${drinkDeckBaseName} ${deckSuffix}`;\n\n  console.log(`${gameName} | End Turn`);\n\n  if (typeof game.combats.active !== 'undefined') {\n    let activeName = canvas.tokens.get(game.combat.combatant.token.id).name;\n    if (game.user.character.name !== activeName) return;\n\n    // Update turn\n    await game.combats.active.nextTurn()\n    canvas.tokens.get(game.combats.active.combatant.data.tokenId).control()\n    let newActiveName = canvas.tokens.get(game.combat.combatant.token.id).name;\n\n    // Update tiles\n    const globalDrinkDeck = game.cards.getName(globalDrinkDeckName);\n    const calledMacro = await game.macros.getName(\"Update Tile Image\");\n    await calledMacro.execute(globalDrinkDeck.data.img,\"Drink\",activeName);\n    const characterMainDeckName = `${game.user.character.name} ${mainDeckBaseName} ${deckSuffix}`;\n    const characterMainDeck = game.cards.getName(characterMainDeckName);\n    const characterMacro = await game.macros.getName(\"Update Tile Image\");\n    await characterMacro.execute(characterMainDeck.data.img,\"Play\",activeName);\n\n    ChatMessage.create({\n      content: `<div>${activeName} ended their turn.</div><div>It's now ${newActiveName}'s turn.</div>`,\n    });\n  } else {\n    ChatMessage.create({\n      content: `<div>Attempt to end turn when <b>no active encounters</b> have started.  Please add characters and start an encounter.</div>`,\n    });\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{}}
{"_id":"elWp1tP1coWJUHIH","name":"Draw Cards","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Draw Cards from the Character's Main Deck.\n */\n// drawCards()\n// Macro Name: Draw Cards\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n  const handSuffix = 'Hand';\n\n  console.log(`${gameName} | Draw Cards`);\n\n  const handName = `${game.user.character.name} ${handSuffix}`;\n  const deckName = `${game.user.character.name} ${mainDeckBaseName} ${deckSuffix}`;\n  const discardName = `${game.user.character.name} ${mainDeckBaseName} ${discardDeckSuffix}`;\n\n  let applyChanges=false;\n  let dialogContent = \"\";\n  let dialogContentHead = `\n      <div>Select Cards to Discard:</div>\n      <form>`;\n  let dialogOptions = \"\";\n  let dailogContentFooter = `</form>`;\n\n  let hand = game.cards.getName(handName);\n  hand.data.cards.forEach(function(element) { \n    dialogOptions = dialogOptions + `\n      <div class=\"form-group\">\n      <input type=\"checkbox\" value=\"${element.data._id}\">${element.data.name}</input>\n      </div>`;\n  });\n\n  dialogOptions = dialogOptions + `\n        <div class=\"form-group\">\n          Draw How many cards: \n          <select id=\"select-type\" name=\"select-type\">\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n              <option value=\"6\">6</option>\n              <option value=\"7\">7</option>\n          </select>\n        </div>`;\n  dialogContent = dialogContentHead + dialogOptions + dailogContentFooter;\n\n  new Dialog({\n    title: `Draw Cards`,\n    content: dialogContent,\n    buttons: {\n      yes: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Draw`,\n        callback: () => applyChanges = true\n      },\n      no: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel`\n      },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n          let nCardsToDraw = html.find('[name=\"select-type\"]')[0].value || null;\n          let cardsToDiscard = $('input[type=checkbox]:checked').map((i, el) => el.value).get();\n          //let cardsToDiscard = html.find('[name=\"selected-card\"]')[0].value || null;\n          const discardCardMacro = game.macros.getName(\"Discard Cards As Character\");\n          discardCardMacro.execute(handName, discardName, cardsToDiscard, game.user.character.name);\n          const dealCardMacro = game.macros.getName(\"Deal Card As Character\");\n          dealCardMacro.execute(deckName,\n                                handName,\n                                game.user.character.name + \" attempted to draw \" + nCardsToDraw + \" cards.\",\n                                game.user.character.name,\n                                false,\n                                nCardsToDraw);\n        }\n      }\n  }).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{}}
{"$$deleted":true,"_id":"elWp1tP1coWJUHIH"}
{"$$deleted":true,"_id":"eMQN0NtSQftzDDuX"}
{"$$deleted":true,"_id":"cb6RHSmkgoUgGtO1"}
{"$$deleted":true,"_id":"aX5IP9ZeAajS1AQo"}
{"$$deleted":true,"_id":"M6ZA3EVL20Pdq2a9"}
{"$$deleted":true,"_id":"FLHMXWBO4ChPtl8c"}
{"name":"View My Cards","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Display Cards from the Character's Main Deck.\n */\n// viewMyCards()\n// Macro Name: View My Cards\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n  const handSuffix = 'Hand';\n\n  console.log(`${gameName} | View My Cards`);\n\n  const handName = `${game.user.character.name} ${handSuffix}`;\n  const discardName = `${game.user.character.name} ${mainDeckBaseName} ${discardDeckSuffix}`\n  const deckName = `${game.user.character.name} ${mainDeckBaseName} ${deckSuffix}`\n\n  const playerHand = game.cards.getName(handName);\n  const playerDiscard = game.cards.getName(discardName);\n  const playerDeck = game.cards.getName(deckName);\n\n  if (playerHand) {\n    playerHand.sheet.render(true);\n  } else {\n    new Dialog({\n      title: \"Deck not found!\",\n      content: `<div>Unable to find Deck!  Ensure GM has created ${handName}, ${deckName}, and ${discardName} decks.</div>`,\n        buttons: {\n        ok: {\n          icon: \"<i class='fas fa-times'></i>\",\n          label: `OK`\n        },\n      },\n      default: \"ok\",\n    }).render(true);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"NLRDFRXsv0rLbUm6"}
{"name":"Play A Card","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Plays a selected card from the character's hand and moves it into the character's discard pile.\n */\n// playACard()\n// Macro Name: Play A Card\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n  const handSuffix = 'Hand';\n\n  console.log(`${gameName} | Play a Card`);\n\n  function updatePlayTileWithCard(cardId, hand, passTo, character) {\n    let playedCard = hand.data.cards.get(cardId);\n    let cardImg = playedCard.img;\n    let cardName = playedCard.name;\n    let calledMacro = game.macros.getName(\"Update Tile Image\");\n    // hand.playDialog(hand.data.cards.get(cardId));\n    hand.pass(passTo, [cardId], {action: \"play\", chatNotification: false});\n    ChatMessage.create({\n      content: `<div>${character.name} played ${cardName}</div>`,\n    });\n    calledMacro.execute(cardImg,\"Play\",character.name);\n  }\n\n\n  let characterHandName = `${game.user.character.name} ${handSuffix}`;\n  let characterMainDiscardName = `${game.user.character.name} ${mainDeckBaseName} ${discardDeckSuffix}`;\n  let doPlayCard = false;\n\n  let hand = game.cards.getName(characterHandName);\n  let passTo = game.cards.getName(characterMainDiscardName);\n  let dialogContent = \"\";\n  let dialogContentHead = `\n      <div>Play which card?</div>\n      <form>\n        <div class=\"form-group\">\n          <select id=\"selected-card\" name=\"selected-card\">`;\n  let dialogOptions = \"\";\n  let dailogContentFooter = `          </select>\n        </div>\n      </form>`;\n\n  if (typeof hand !== 'undefined' && typeof passTo !== 'undefined') {\n    hand.data.cards.forEach(function(element) { \n      dialogOptions = dialogOptions + '<option value=\"' + element.data._id + '\">' + element.data.name + \"</option>\";\n    });\n    dialogContent = dialogContentHead + dialogOptions + dailogContentFooter;\n    new Dialog({\n      title: \"Play a Card\",\n      content: dialogContent,\n      buttons: {\n        play: {\n          icon: \"<i class='fas fa-check'></i>\",\n          label: `Play Card`,\n          callback: () => doPlayCard = true\n        },\n        cancel: {\n          icon: \"<i class='fas fa-times'></i>\",\n          label: `Cancel`\n        },\n      },\n      default: \"cancel\",\n      close: html => {\n          if (doPlayCard) {\n            let selectedCardID = html.find('[name=\"selected-card\"]')[0].value || null;\n            if(selectedCardID) {\n              updatePlayTileWithCard(selectedCardID, hand, passTo, game.user.character);\n            }\n          }\n        }\n    }).render(true);\n  }\n  else {\n    new Dialog({\n      title: \"Deck not found!\",\n      content: `<div>Unable to find Decks!  Ensure GM has created \"` + handName + `\" and \"` + passToName + `\" decks.</div>`,\n      buttons: {\n        ok: {\n          icon: \"<i class='fas fa-times'></i>\",\n          label: `OK`\n        },\n      },\n      default: \"ok\",\n    }).render(true);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"zVhcsO73DQvXPJbM"}
{"name":"Shuffle Character Deck","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Shuffle the character's main deck.\n */\n// shuffleCharacterDeck()\n// Macro Name: Shuffle Character Deck\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n\n  const shuffleDeckMacro = \"Shuffle Deck\";\n\n  console.log(`${gameName} | Shuffle Character Deck`)\n\n  let calledMacro = null;\n\n\n  const deckToShuffle = `${game.user.character.name} ${mainDeckBaseName} ${deckSuffix}`;\n  const discardDeckName = `${game.user.character.name} ${mainDeckBaseName} ${discardDeckSuffix}`;\n  let doTheShuffle = false;\n  let chatText = '';\n\n  let dialogContent = `\n      <div>Shuffle Deck</div>\n      <form>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" id=\"collect-discards\" name=\"collect-discards\">\n          <label for=\"collect-discards\">Collect Discards</label><br>\n        </div>\n      </form>`;\n\n  new Dialog({\n    title: `Shuffle ${deckToShuffle}`,\n    content: dialogContent,\n    buttons: {\n      play: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Shuffle!`,\n        callback: () => doTheShuffle = true\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel`\n      },\n    },\n    default: \"cancel\",\n    close: html => {\n      if (doTheShuffle) {\n        let collectDiscards = html.find('[name=\"collect-discards\"]')[0].checked;\n        if (collectDiscards) {\n          chatText = chatText + `<div>${game.user.character.name} collected the ${discardDeckName}s.</div>`\n          console.log(`[${gameName}] Collecting discards from ${discardDeckName} for ${deckToShuffle}`);\n          calledMacro = game.macros.getName(\"Collect Discards\");\n          calledMacro.execute(deckToShuffle,discardDeckName);\n        }\n        calledMacro = game.macros.getName(shuffleDeckMacro);\n        calledMacro.execute(deckToShuffle, true);\n        console.log(deckToShuffle + \"has been shuffled.\");\n        ChatMessage.create({\n          user: game.user,\n          content: chatText + `<div>${game.user.character.name} shuffled ${deckToShuffle}.</div>`,\n        });\n      }\n    }\n  }).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"bCI540CuZQB6YpH2"}
{"name":"Update My Stat","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Updates the given stat for an character.  Calls the \"Update Character Stat\" macro.\n * @param {string}      statName            The name of the stat to adjust (e.g. \"Fortitude\").\n * @param {int}         amountToUpdateBy    The amount to add to the stat.\n * @param {string}      ownedCharacterName  (optional) The name of the character that owns the stat.\n * @returns Promise                         All macros return promise.\n */\n\n// updateMyStat(statName, amountToUpdateBy, ownedCharacterName)\n// Macro Name: Update My Stat\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\";\n\n  console.log(`${gameName} | Update My Stat`)\n\n  if (args.length > 1) {\n    // Here we support both any character and named character checking via parameters.\n    if (args.length > 2) {\n      if (game.user.character.name !== args[2]) return\n    }\n    const statToUpdate = args[0];\n    const amountToUpdateBy = args[1];\n    const statMacro = game.macros.getName(\"Update Character Stat\");\n    statMacro.execute(amountToUpdateBy,statToUpdate,game.user.character.name);\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"iFMjqt7ytny1fPn5"}
{"name":"End Turn","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Ends the player's turn and moves to the next one in the combat tracker.\n */\n// endTurn()\n// Macro Name: End Turn\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n  const globalDrinkDeckName = `${gameName} ${drinkDeckBaseName} ${deckSuffix}`;\n\n  console.log(`${gameName} | End Turn`);\n\n  if (typeof game.combats.active !== 'undefined') {\n    let activeName = canvas.tokens.get(game.combat.combatant.token.id).name;\n    if (game.user.character.name !== activeName) return;\n\n    // Update turn\n    await game.combats.active.nextTurn()\n    canvas.tokens.get(game.combats.active.combatant.data.tokenId).control()\n    let newActiveName = canvas.tokens.get(game.combat.combatant.token.id).name;\n\n    // Update tiles\n    const globalDrinkDeck = game.cards.getName(globalDrinkDeckName);\n    const calledMacro = await game.macros.getName(\"Update Tile Image\");\n    await calledMacro.execute(globalDrinkDeck.data.img,\"Drink\",activeName);\n    const characterMainDeckName = `${game.user.character.name} ${mainDeckBaseName} ${deckSuffix}`;\n    const characterMainDeck = game.cards.getName(characterMainDeckName);\n    const characterMacro = await game.macros.getName(\"Update Tile Image\");\n    await characterMacro.execute(characterMainDeck.data.img,\"Play\",activeName);\n\n    ChatMessage.create({\n      content: `<div>${activeName} ended their turn.</div><div>It's now ${newActiveName}'s turn.</div>`,\n    });\n  } else {\n    ChatMessage.create({\n      content: `<div>Attempt to end turn when <b>no active encounters</b> have started.  Please add characters and start an encounter.</div>`,\n    });\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"wTKnGfECGOFMqO5L"}
{"name":"Draw Cards","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Draw Cards from the Character's Main Deck.\n */\n// drawCards()\n// Macro Name: Draw Cards\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n  const handSuffix = 'Hand';\n\n  console.log(`${gameName} | Draw Cards`);\n\n  const handName = `${game.user.character.name} ${handSuffix}`;\n  const deckName = `${game.user.character.name} ${mainDeckBaseName} ${deckSuffix}`;\n  const discardName = `${game.user.character.name} ${mainDeckBaseName} ${discardDeckSuffix}`;\n\n  let applyChanges=false;\n  let dialogContent = \"\";\n  let dialogContentHead = `\n      <div>Select Cards to Discard:</div>\n      <form>`;\n  let dialogOptions = \"\";\n  let dailogContentFooter = `</form>`;\n\n  let hand = game.cards.getName(handName);\n  hand.data.cards.forEach(function(element) { \n    dialogOptions = dialogOptions + `\n      <div class=\"form-group\">\n      <input type=\"checkbox\" value=\"${element.data._id}\">${element.data.name}</input>\n      </div>`;\n  });\n\n  dialogOptions = dialogOptions + `\n        <div class=\"form-group\">\n          Draw How many cards: \n          <select id=\"select-type\" name=\"select-type\">\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n              <option value=\"6\">6</option>\n              <option value=\"7\">7</option>\n          </select>\n        </div>`;\n  dialogContent = dialogContentHead + dialogOptions + dailogContentFooter;\n\n  new Dialog({\n    title: `Draw Cards`,\n    content: dialogContent,\n    buttons: {\n      yes: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Draw`,\n        callback: () => applyChanges = true\n      },\n      no: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel`\n      },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n          let nCardsToDraw = html.find('[name=\"select-type\"]')[0].value || null;\n          let cardsToDiscard = $('input[type=checkbox]:checked').map((i, el) => el.value).get();\n          //let cardsToDiscard = html.find('[name=\"selected-card\"]')[0].value || null;\n          const discardCardMacro = game.macros.getName(\"Discard Cards As Character\");\n          discardCardMacro.execute(handName, discardName, cardsToDiscard, game.user.character.name);\n          const dealCardMacro = game.macros.getName(\"Deal Card As Character\");\n          dealCardMacro.execute(deckName,\n                                handName,\n                                game.user.character.name + \" attempted to draw \" + nCardsToDraw + \" cards.\",\n                                game.user.character.name,\n                                false,\n                                nCardsToDraw);\n        }\n      }\n  }).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"d2JJigkrJCAp2I9z"}
{"name":"Order A Drink","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Transfers the top card of the global drink pile to the character's personal drink pile.\n * @param {string}      globalDrinkDeckName   The name of the global drink pile to draw from.\n */\n// orderADrink()\n// Macro Name: Order A Drink\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n\n  console.log(`${gameName} | Order a Drink`);\n\n\n  let applyChanges = false;\n  let globalDrinkDeckName = `${gameName} ${drinkDeckBaseName} ${deckSuffix}`;\n  let targetedPlayerDrinkDeckName = \"\";\n  let dialogContent = \"\";\n  let dialogContentHead = `\n      <div>For whom would you like to order a drink?</div>\n      <form>\n        <div class=\"form-group\">\n          <select id=\"selected-character\" name=\"selected-character\">`;\n  let dialogOptions = \"\";\n  let dailogContentFooter = `          </select>\n        </div>\n      </form>`;\n\n  if (args.length > 0) {\n    globalDrinkDeckName = args[1];\n  }\n\n  let globalDrinkDeck = game.cards.getName(globalDrinkDeckName);\n  const sceneId = game.scenes.active.id;\n  const userIds = game.users.players.filter(u=> u.active===true && typeof u.character !== 'undefined')\n          .filter(u=> typeof u.character.name !== 'undefined')\n          .map(u=>u.character.name);\n\n  userIds.forEach(function(element) { \n    dialogOptions = dialogOptions + `<option value=\"${element}\">${element}</option>`;\n  });\n  dialogContent = dialogContentHead + dialogOptions + dailogContentFooter;\n  new Dialog({\n    title: \"Order a Drink\",\n    content: dialogContent,\n    buttons: {\n      play: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Order a Drink!`,\n        callback: () => applyChanges = true\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel`\n      },\n    },\n    default: \"cancel\",\n    close: html => {\n        if (applyChanges) {\n              let selectedCharacter = html.find('[name=\"selected-character\"]')[0].value || null;\n              if(selectedCharacter) {\n                targetedPlayerDrinkDeckName = `${selectedCharacter} ${drinkDeckBaseName} ${deckSuffix}`;\n                console.log(targetedPlayerDrinkDeckName);\n                const dealCardMacro = game.macros.getName(\"Deal Card As Character\");\n                dealCardMacro.execute(globalDrinkDeckName,\n                                      targetedPlayerDrinkDeckName,\n                                      game.user.character.name + \" bought a drink for \" + selectedCharacter,\n                                      game.user.character.name,\n                                      true);\n              }\n          }\n      }\n  }).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"34FCPc3OooSdDQGU"}
{"name":"Shuffle Drinks","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Shuffles the global consumables deck (e.g. Inn Drink Deck).\n */\n\n// shuffleDrinks()\n// Macro Name: Shuffle Drinks\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n\n  const shuffleDeckMacro = \"Shuffle Deck\";\n\n  console.log(`${gameName} | Shuffle Drinks`)\n\n  let calledMacro = null;\n\n  const deckToShuffle = `${gameName} ${drinkDeckBaseName} ${deckSuffix}`;\n  const discardDeckName = `${gameName} ${drinkDeckBaseName} ${discardDeckSuffix}`;\n  let doTheShuffle = false;\n  let chatText = '';\n\n  let dialogContent = `\n      <div>Shuffle Deck</div>\n      <form>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" id=\"collect-discards\" name=\"collect-discards\">\n          <label for=\"collect-discards\">Collect Inn Discards</label><br>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" id=\"collect-character-discards\" name=\"collect-character-discards\">\n          <label for=\"collect-character-discards\">Collect All Character Drink Discards</label><br>\n        </div>\n      </form>`;\n\n  new Dialog({\n    title: `Shuffle ${deckToShuffle}`,\n    content: dialogContent,\n    buttons: {\n      play: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Shuffle!`,\n        callback: () => doTheShuffle = true\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel`\n      },\n    },\n    default: \"cancel\",\n    close: html => {\n      if (doTheShuffle) {\n        let collectGlobalDiscards = html.find('[name=\"collect-discards\"]')[0].checked;\n        let collectCharacterDiscards = html.find('[name=\"collect-character-discards\"]')[0].checked;\n        if (collectGlobalDiscards) {\n          chatText = chatText + `<div>${game.user.character.name} collected the ${discardDeckName}s.</div>`\n          console.log(`[${gameName}] Collecting discards from ${discardDeckName} for ${deckToShuffle}`);\n          calledMacro = game.macros.getName(\"Collect Discards\");\n          calledMacro.execute(deckToShuffle,discardDeckName);\n        }\n        if (collectCharacterDiscards) {\n          let allPlayers = game.users.filter(d=>d.hasPlayerOwner === true);\n          chatText = chatText + `<div>${game.user.character.name} collected all the player drink discards.</div>`\n          allPlayers.forEach(async function(p){\n            const characterDrinkDiscard = p.character.name + ' ' + drinkDeckBaseName + ' ' + discardDeckSuffix;\n            console.log(`[${gameName}] Collecting discards from ${characterDrinkDiscard} for ${deckToShuffle}`);\n            calledMacro = game.macros.getName(\"Collect Discards\");\n            await calledMacro.execute(deckToShuffle,characterDrinkDiscard);\n          });\n        }\n        calledMacro = game.macros.getName(shuffleDeckMacro);\n        calledMacro.execute(deckToShuffle, true);\n        console.log(deckToShuffle + \"has been shuffled.\");\n        ChatMessage.create({\n          user: game.user,\n          content: chatText + `<div>${game.user.character.name} shuffled ${deckToShuffle}.</div>`,\n        });\n      }\n    }\n  }).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"fd8mby7eY2HLnBwl"}
{"name":"Take A Drink","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Plays the top card from the character's drink pile into the character's drink discard pile.\n * @param {string}      personalDrinkDeckName   (Optional) The name of the character's drink pile to draw from.\n * @param {string}      personalDrinkDeckName   (Optional) The name of the character's discard pile to send to.\n */\n// takeADrink()\n// Macro Name: Take A Drink\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n\n  console.log(`${gameName} | Take a Drink`);\n\n  let personalDrinkDeckName = \"\";\n  let drinkDiscardName = \"\";\n\n  if (args.length > 0) {\n    personalDrinkDeckName = args[0];\n  } else {\n    personalDrinkDeckName = `${game.user.character.name} ${drinkDeckBaseName} ${deckSuffix}`;\n  }\n\n  if (args.length > 1) {\n    drinkDiscardName = args[1];\n  } else {\n    drinkDiscardName = `${game.user.character.name} ${drinkDeckBaseName} ${discardDeckSuffix}`;\n  }\n\n  const playMacro = game.macros.getName(\"Resolve Take A Drink\");\n  await playMacro.execute(game.user.character.name, game.user.id);\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"esb8lBOE2YEpDXEs"}
{"name":"Gambling","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Offers a selection of gambling options: Ante Up or Collect Gold.\n */\n// gambling()\n// Macro Name: Gambling\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n  const handSuffix = 'Hand';\n\n  console.log(`${gameName} | Gambling`);\n\n  let doAnteUp = false;\n  let doCollect = false;\n\n  let dialogContent = `\n      <div>Ante</div>\n        <div class=\"form-group\">\n          Amount to Add to Pot:\n          <select id=\"gold-amount\" name=\"gold-amount\">\n              <option value=\"1\" selected=\"selected\">1</option>\n              <option value=\"2\">2</option>\n          </select>\n        </div>\n      </form>`;\n\n  new Dialog({\n    title: \"Ante\",\n    content: dialogContent,\n    buttons: {\n      play: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Ante Up`,\n        callback: () => doAnteUp = true\n      },\n      collect: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Collect Pot`,\n        callback: () => doCollect = true\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel`\n      },\n    },\n    default: \"cancel\",\n    close: html => {\n        if (doAnteUp) {\n          let amountToAnte = html.find('[name=\"gold-amount\"]')[0].value;\n          let anteMacro = game.macros.getName(\"Resolve Pay Gold\");\n          anteMacro.execute(game.user.character.name,\"Pot\",amountToAnte);\n        }\n        else if (doCollect) {\n          let collectPotMacro = game.macros.getName(\"Resolve Collect Pot\");\n          collectPotMacro.execute(game.user.character.name);\n        }\n      }\n  }).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"c1TBeaH3b89d2cZS"}
{"name":"Pay Gold","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Offers a selection of players/Inn/Pot to pay gold.\n */\n// payGold()\n// Macro Name: Pay Gold\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n  const handSuffix = 'Hand';\n\n  console.log(`${gameName} | Pay Gold`);\n\n  let doPayGold = false;\n\n  let dialogContent = \"\";\n  let dialogContentHead = `\n      <div>To whom would you like to pay gold?</div>\n      <div>(select yourself to collect from ${gameName})</div>\n      <form>\n        <div class=\"form-group\">\n          <select id=\"selected-target\" name=\"selected-target\">`;\n  let dialogOptions = `<option value=\"${gameName}\" selected=\"selected\">${gameName}</option>`;\n\n  let dailogContentFooter = `\n          </select>\n        </div>\n        <div class=\"form-group\">\n          Amount: \n          <select id=\"gold-amount\" name=\"gold-amount\">\n              <option value=\"1\" selected=\"selected\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n              <option value=\"6\">6</option>\n              <option value=\"7\">7</option>\n          </select>\n        </div>\n      </form>`;\n\n  const ownedCharacters = game.users.players.filter(u=> u.active===true && typeof u.character !== 'undefined')\n          .filter(u=> typeof u.character.name !== 'undefined')\n          .map(u=>u.character.name);\n  ownedCharacters.forEach(function(element) { \n    dialogOptions = dialogOptions + `<option value=\"${element}\">${element}</option>`;\n  });\n\n  dialogContent = dialogContentHead + dialogOptions + dailogContentFooter;\n  new Dialog({\n    title: \"Pay Gold\",\n    content: dialogContent,\n    buttons: {\n      play: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Pay Gold`,\n        callback: () => doPayGold = true\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel`\n      },\n    },\n    default: \"cancel\",\n    close: html => {\n        if (doPayGold) {\n          let targetCharacter = html.find('[name=\"selected-target\"]')[0].value;\n          let amountToPay = html.find('[name=\"gold-amount\"]')[0].value;\n          let payMacro = game.macros.getName(\"Resolve Pay Gold\");\n          payMacro.execute(game.user.character.name,targetCharacter,amountToPay);\n        }\n      }\n  }).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"JahC1IMkRdC10nZJ"}
{"name":"Create Cards On Scene","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Creates the card tiles that house played cards within the game.\n */\n// createCardsOnScene()\n// Macro Name: Create Cards On Scene\n// Run As GM: false\n// Has Widget: false\n\nlet tileInfo = {\n  img: \"\",\n  width: 300,\n  height: 450,\n  x: 1600,\n  y: 800,\n  flags: {\n    \"tagger\": {\n        \"tags\": []\n    },\n  }\n}\n\n\nasync function createPlayerCardTile(cardType, tileX, tileY, paddingX, paddingY, numColumns) {\n  // Create the tiles for player cards and stats\n  let playerCharacters = game.users.filter(d=>d.hasPlayerOwner === true).map(d=>d.character.name);\n  const initialX = tileX;\n  const initialY = tileY;\n\n  for (var i=0; i< playerCharacters.length; i++) {\n    let tileTags = [\"Tile\", cardType, playerCharacters[i]];\n    let existingTiles = Tagger.getByTag(tileTags);\n    if (existingTiles.length === 0) {\n      tileInfo.img = \"cards/dark-gold/clubs-ace.webp\";\n      tileInfo.flags.tagger.tags = tileTags;\n      tileInfo.x = tileX;\n      tileInfo.y = tileY;\n      await TileDocument.createDocuments([tileInfo], {parent: canvas.scene});\n    }\n    if (Math.floor(tileX - initialX) / (tileInfo.width + paddingX) === numColumns - 1) {\n      tileY = tileY + tileInfo.height + paddingY;\n      tileX = initialX;\n    } else {\n      tileX = tileX + tileInfo.width + paddingX;\n    }\n  }\n}\n\n\nawait createPlayerCardTile(\"Play\", 2250, 800, 150 + tileInfo.width, 400, 3);\nawait createPlayerCardTile(\"Drink\", 2250 + 20 + tileInfo.width, 800, 150 + tileInfo.width, 400, 3);","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"YwpIh1em9VeicrHS"}
{"name":"Run All Inits","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Runs all the init macros.\n */\n// runAllInits()\n// Macro Name: Run All Inits\n// Run As GM: false\n// Has Widget: false\n\nlet calledMacro = {};\n\ncalledMacro = game.macros.getName(\"Create Cards On Scene\");\nawait calledMacro.execute();\ncalledMacro = game.macros.getName(\"Create Stat Buttons On Scene\");\nawait calledMacro.execute();\ncalledMacro = game.macros.getName(\"Create Stats On Scene\");\nawait calledMacro.execute();\ncalledMacro = game.macros.getName(\"Create Buttons On Scene\");\nawait calledMacro.execute();\ncalledMacro = game.macros.getName(\"Create Game Decks\");\nawait calledMacro.execute();","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"advanced-macros":{"runAsGM":false}},"_id":"oj4JBZ25mFagy0ih"}
{"name":"Create Stat Buttons On Scene","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Creates the stat buttons that for players to interact with adjusting their stats.\n */\n// createStatButtonsOnScene()\n// Macro Name: Create Stat Buttons On Scene\n// Run As GM: false\n// Has Widget: false\n\nconst macroInstance = game.macros.getName(\"Update My Stat\");\n\n\nlet tileInfo = {\n  img: \"Tiles/buttons/arrow-27-xxl.png\",\n  width: 100,\n  height: 100,\n  x: 2300,\n  y: 1250,\n  rotation: 0,\n  flags: {\n    \"tagger\": {\n        \"tags\": []\n    },\n    \"monks-active-tiles\": {\n      \"active\": true,\n      \"record\": false,\n      \"restriction\": \"all\",\n      \"controlled\": \"all\",\n      \"trigger\": \"click\",\n      \"pointer\": true,\n      \"pertoken\": false,\n      \"minrequired\": 0,\n      \"chance\": 100,\n      \"actions\": [{\n        \"action\": \"runmacro\",\n        \"data\": {\n            \"macroid\": macroInstance.id,\n            \"args\": \"\",\n            \"runasgm\": \"player\"\n        }\n      }]\n    },\n  }\n}\n\n\nasync function createPlayerStatButton(statTypes, tileX, tileY, paddingX, paddingY, numColumns, tileData) {\n  // Create the tiles for player cards and stats\n  let playerCharacters = game.users.filter(d=>d.hasPlayerOwner === true).map(d=>d.character.name);\n  const initialX = tileX;\n  const initialY = tileX;\n\n  for (var i=0; i< playerCharacters.length; i++) {\n    let tileTags = [\"Tile\", ...statTypes, playerCharacters[i]];\n    let existingTiles = Tagger.getByTag(tileTags);\n    if (existingTiles.length === 0) {\n      tileData.flags.tagger.tags = tileTags;\n      tileData.x = tileX;\n      tileData.y = tileY;\n      await TileDocument.createDocuments([tileData], {parent: canvas.scene});\n    }\n    if (Math.floor(tileX - initialX) / paddingX === numColumns - 1) {\n      tileY = tileY + paddingY;\n      tileX = initialX;\n    } else {\n      tileX = tileX + paddingX;\n    }\n  }\n}\n\n\ntileInfo.flags[\"monks-active-tiles\"].actions[0].data.args = \"Alcohol -1\";\ntileInfo.rotation = 180;\nawait createPlayerStatButton([\"Alcohol\", \"Decrement\"], 2300, 1250, 750, 850, 3, tileInfo);\ntileInfo.flags[\"monks-active-tiles\"].actions[0].data.args = \"Alcohol 1\";\ntileInfo.rotation = 0;\nawait createPlayerStatButton([\"Alcohol\", \"Increment\"], 2400, 1250, 750, 850, 3, tileInfo);\n\ntileInfo.flags[\"monks-active-tiles\"].actions[0].data.args = \"Fortitude -1\";\ntileInfo.rotation = 180;\nawait createPlayerStatButton([\"Fortitude\", \"Decrement\"], 2600, 1250, 750, 850, 3, tileInfo);\ntileInfo.flags[\"monks-active-tiles\"].actions[0].data.args = \"Fortitude 1\";\ntileInfo.rotation = 0;\nawait createPlayerStatButton([\"Fortitude\", \"Increment\"], 2700, 1250, 750, 850, 3, tileInfo);","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"XmTfwVyeAjPk0sYN"}
{"name":"Create Game Decks","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Create the Game Decks, including Decks for Characters that have Owners.\n */\n// createGameDecks()\n// Macro Name: Create Game Decks\n// Run As GM: false\n// Has Widget: false\n\nconst gameName = \"The Inn\";\nconst mainDeckBaseName = 'Main';\nconst drinkDeckBaseName = 'Drink';\nconst discardDeckSuffix = 'Discard';\nconst deckSuffix = 'Deck';\nconst innDeckName = `${gameName} ${drinkDeckBaseName} ${deckSuffix}`;\nconst innDiscardName = `${gameName} ${drinkDeckBaseName} ${discardDeckSuffix}`;\n\n\n/**\n * Create a Cards Folder with the Character's Name, if it doesn't already exist.\n * @param {string}     characterName  The name of the character with which the folder will be named.\n * @return {string}    The id of the referenced Cards folder.\n */\nasync function createCharacterCardsFolder(characterName) {\n  console.log(`[${gameName}] Creating folder for ${characterName}.`)\n  let existingFolder = await game.cards.directory.folders.filter(d=>d.name === characterName);\n  if (existingFolder.length === 0) {\n    let newFolder = await Folder.create({name: characterName, type: \"Cards\", description: \"Character cards\"});\n    console.log(newFolder.id);\n    return newFolder.id;\n  } else {\n    console.log(`[${gameName}] Skipping creation of folder ${existingFolder}, as it already exists`);\n    console.log(existingFolder[0].id);\n    return existingFolder[0].id;\n  }\n}\n\n/**\n * Create a Card Stack if it doesn't already exist.\n * @param {string}     stackName  The name of the stack with which the stack will be named.\n * @param {string}     stackType  The type of Card stack to create.  e.g., \"hand\", \"pile\"\n * @param {string}     folderId   The id of the folder in which the stack should go.\n * @return {string}    The id of the referenced Cards stack.\n */\nasync function createCardStack(stackName, stackType, folderId, permsOwner='', permsLevel=1) {\n  let existingStack = game.cards.getName(stackName);\n  let stackPerms = {};\n  if (permsOwner !== '') stackPerms[permsOwner]=permsLevel;\n  if (typeof existingStack === 'undefined') {\n    let newStack = await Cards.create({\n                      name: stackName,\n                      type: stackType,\n                      width: 2,\n                      height: 3,\n                      rotation: 0,\n                      folder: folderId,\n                      sort: 0,\n                      permission: stackPerms\n                    });\n    return newStack.id;\n  } else {\n    console.log(`Skipping creation of stack ${stackName}, as it already exists`);\n    return existingStack.id;\n  }\n}\n\n\nlet allPlayers = game.users.filter(d=>d.hasPlayerOwner === true);\nlet folderId = '';\n\nallPlayers.forEach(async function(p){\n  const mainDeckName = p.character.name + ' ' + mainDeckBaseName + ' ' + deckSuffix;\n  const mainDiscardDeckName = p.character.name + ' ' + mainDeckBaseName + ' ' + discardDeckSuffix;\n  const drinkDeckName = p.character.name + ' ' + drinkDeckBaseName + ' ' + deckSuffix;\n  const drinkDiscardDeckName = p.character.name + ' ' + drinkDeckBaseName + ' ' + discardDeckSuffix;\n  const playerId = p.id;\n  const folderId = await createCharacterCardsFolder(p.character.name);\n\n  if (folderId != '') {\n    await createCardStack(mainDeckName, \"pile\", folderId, playerId, 1);\n    await createCardStack(mainDiscardDeckName, \"pile\", folderId, playerId, 3);\n    await createCardStack(drinkDeckName, \"pile\", folderId, playerId, 1);\n    await createCardStack(drinkDiscardDeckName, \"pile\", folderId, playerId, 3);\n    await createCardStack(p.character.name + ' Hand', \"hand\", folderId, playerId, 3);\n  }\n});\nawait createCardStack(innDeckName, \"pile\", null);\nawait createCardStack(innDiscardName, \"pile\", null);","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"gbkL3S8EnpSXvIzX"}
{"name":"Create Stats On Scene","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Creates drawings that house character stats on the scene within the game.\n */\n// createStatsOnScene()\n// Macro Name: Create Stats On Scene\n// Run As GM: false\n// Has Widget: false\n\nlet author = this.data.author;\n\nlet drawingInfo = {\n  author: author,\n  text: \"Alcohol: 0\",\n  width: 350,\n  height: 75,\n  x: 2213,\n  y: 1350,\n  flags: {\n    \"tagger\": {\n        \"tags\": [\"Pash\", \"Alcohol\", \"Test\"]\n    },\n  }\n}\n\n\nasync function createPlayerStatDrawing(statType, statStartValue, tileX, tileY, paddingX, paddingY, numColumns, drawingData) {\n  // Create the tiles for player cards and stats\n  let playerCharacters = game.users.filter(d=>d.hasPlayerOwner === true).map(d=>d.character.name);\n  const initialX = tileX;\n  const initialY = tileX;\n\n\n  for (var i=0; i< playerCharacters.length; i++) {\n    let tileTags = [\"Text\", \"Stats\", statType, playerCharacters[i]];\n    let existingTiles = Tagger.getByTag(tileTags);\n    if (existingTiles.length === 0) {\n      drawingData.text = `${statType}: ${statStartValue}`;\n      if (statType === \"Name\") drawingData.text = playerCharacters[i];\n      drawingData.flags.tagger.tags = tileTags;\n      drawingData.x = tileX;\n      drawingData.y = tileY;\n      await DrawingDocument.createDocuments([drawingData], {parent: canvas.scene});\n    }\n    if (Math.floor(tileX - initialX) / paddingX === numColumns - 1) {\n      tileY = tileY + paddingY;\n      tileX = initialX;\n    } else {\n      tileX = tileX + paddingX;\n    }\n  }\n}\n\n\nawait createPlayerStatDrawing(\"Alcohol\", 0, 2213, 1350, 750, 850, 3, drawingInfo);\nawait createPlayerStatDrawing(\"Fortitude\", 20, 2563, 1350, 750, 850, 3, drawingInfo);\nawait createPlayerStatDrawing(\"Drinks\", 0, 2213, 1425, 725, 850, 3, drawingInfo);\nawait createPlayerStatDrawing(\"Gold\", 10, 2550, 1425, 725, 850, 3, drawingInfo);\nawait createPlayerStatDrawing(\"Name\", \"name\", 2450, 1475, 725, 850, 3, drawingInfo);\n\nlet tileTags = [\"Drawing\", \"Text\", \"Gold\", \"Pot\", \"Stats\", \"Global\"];\nlet existingTiles = Tagger.getByTag(tileTags);\nif (existingTiles.length === 0) {\n  drawingInfo.flags.tagger.tags = tileTags;\n  drawingInfo.x = 1725;\n  drawingInfo.y = 1388;\n  drawingInfo.text = \"Pot: 0\";\n  drawingInfo.width = 350;\n  drawingInfo.height = 75;\n  await DrawingDocument.createDocuments([drawingInfo], {parent: canvas.scene})\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"IoBSX9zTwwOBA0ja"}
{"name":"Create Buttons On Scene","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Creates the buttons for players to interact with the game.\n */\n// createButtonsOnScene()\n// Macro Name: Create Buttons On Scene\n// Run As GM: false\n// Has Widget: false\n\nconst buttonInstances = [\n  {\n    macroName: \"Shuffle Character Deck\",\n    img: \"Tiles/buttons/shuffle-my-deck-Button-PNG-Picture.png\",\n    tags: [ \"Button\", \"Shuffle\", \"Character\", \"Test\" ],\n  },\n  {\n    macroName: \"Shuffle Drinks\",\n    img: \"Tiles/buttons/shuffle-drink-deck-Button-PNG-Picture.png\",\n    tags: [ \"Button\", \"Shuffle\", \"Drink\", \"Tavern\", \"Test\" ],\n  },\n  {\n    macroName: \"View My Cards\",\n    img: \"Tiles/buttons/view-my-cards-Button-PNG-Picture.png\",\n    tags: [ \"Button\", \"Hand\", \"Character\", \"Test\" ],\n  },\n  {\n    macroName: \"Order A Drink\",\n    img: \"Tiles/buttons/order-a-drink-Button-PNG-Picture.png\",\n    tags: [ \"Button\", \"Draw\", \"Tavern\", \"Drink\", \"Test\" ],\n  },\n  {\n    macroName: \"Draw Cards\",\n    img: \"Tiles/buttons/draw-cards-Button-PNG-Picture.png\",\n    tags: [ \"Button\", \"Draw\", \"Character\", \"Test\" ],\n  },\n\n  {\n    macroName: \"Take A Drink\",\n    img: \"Tiles/buttons/take-a-drink-Button-PNG-Picture.png\",\n    tags: [ \"Button\", \"Play\", \"Drink\", \"Tavern\", \"Test\" ],\n  },\n  {\n    macroName: \"Play A Card\",\n    img: \"Tiles/buttons/play-a-card-Button-PNG-Picture.png\",\n    tags: [ \"Button\", \"Play\", \"Character\", \"Test\" ],\n  },\n  {\n    macroName: \"End Turn\",\n    img: \"Tiles/buttons/end-turn-Button-PNG-Picture.png\",\n    tags: [ \"Button\", \"End\", \"Turn\", \"Character\", \"Test\" ],\n  },\n  {\n    macroName: \"Gambling\",\n    img: \"Tiles/buttons/gambling-Button-PNG-Picture.png\",\n    tags: [ \"Button\", \"Gold\", \"Pot\", \"Global\", \"Test\" ],\n  },\n  {\n    macroName: \"Pay Gold\",\n    img: \"Tiles/buttons/pay-gold-Button-PNG-Picture.png\",\n    tags: [ \"Button\", \"Gold\", \"Character\", \"Tavern\", \"Test\" ],\n  },\n]\n\nlet tileInfo = {\n  img: \"\",\n  width: 300,\n  height: 128,\n  x: 1600,\n  y: 800,\n  flags: {\n    \"tagger\": {\n        \"tags\": []\n    },\n    \"monks-active-tiles\": {\n      \"active\": true,\n      \"record\": false,\n      \"restriction\": \"all\",\n      \"controlled\": \"all\",\n      \"trigger\": \"click\",\n      \"pointer\": true,\n      \"pertoken\": false,\n      \"minrequired\": 0,\n      \"chance\": 100,\n      \"actions\": [{\n        \"action\": \"runmacro\",\n        \"data\": {\n            \"macroid\": \"\",\n            \"args\": \"\",\n            \"runasgm\": \"player\"\n        }\n      }]\n    }\n  }\n}\n\nconst initTileX = 1600;\nconst initTileY = 800;\nlet tileX = initTileX;\nlet tileY = initTileY;\n\nfor (var i=0; i < buttonInstances.length; i++) {\n  let existingTiles = Tagger.getByTag(buttonInstances[i].tags);\n  if (existingTiles.length === 0) {\n    const macroInstance = game.macros.getName(buttonInstances[i].macroName);\n    tileInfo.img = buttonInstances[i].img;\n    tileInfo.flags.tagger.tags = buttonInstances[i].tags;\n    tileInfo.flags[\"monks-active-tiles\"].actions[0].data.macroid = macroInstance.id;\n    tileInfo.x = tileX;\n    tileInfo.y = tileY;\n    let tileDataDoc = await TileDocument.createDocuments([tileInfo], {parent: canvas.scene});\n    if (tileX === initTileX + tileInfo.width - 10) {\n      tileY = tileY + tileInfo.height - 10;\n      tileX = initTileX;\n    } else {\n      tileX = tileX + tileInfo.width - 10;\n    }\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{},"_id":"muk87jswuH9FKs94"}
{"name":"Run All Inits","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Runs all the init macros.\n */\n// runAllInits()\n// Macro Name: Run All Inits\n// Run As GM: false\n// Has Widget: false\n\nlet calledMacro = {};\n\ncalledMacro = game.macros.getName(\"Create Cards On Scene\");\nawait calledMacro.execute();\ncalledMacro = game.macros.getName(\"Create Stat Buttons On Scene\");\nawait calledMacro.execute();\ncalledMacro = game.macros.getName(\"Create Stats On Scene\");\nawait calledMacro.execute();\ncalledMacro = game.macros.getName(\"Create Buttons On Scene\");\nawait calledMacro.execute();\ncalledMacro = game.macros.getName(\"Create Game Decks\");\nawait calledMacro.execute();","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.QgIb1QVFPChtVpI9"}},"_id":"sa5kz12AKiOgj0yZ"}
{"name":"Draw Cards","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Draw Cards from the Character's Main Deck.\n */\n// drawCards()\n// Macro Name: Draw Cards\n// Run As GM: false\n// Has Widget: true\n\nif (game.paused !== true && typeof game.user.character !== 'undefined') {\n  const gameName = \"The Inn\"\n  const mainDeckBaseName = 'Main';\n  const drinkDeckBaseName = 'Drink';\n  const discardDeckSuffix = 'Discard';\n  const deckSuffix = 'Deck';\n  const handSuffix = 'Hand';\n\n  console.log(`${gameName} | Draw Cards`);\n\n  const handName = `${game.user.character.name} ${handSuffix}`;\n  const deckName = `${game.user.character.name} ${mainDeckBaseName} ${deckSuffix}`;\n  const discardName = `${game.user.character.name} ${mainDeckBaseName} ${discardDeckSuffix}`;\n\n  let applyChanges=false;\n  let dialogContent = \"\";\n  let dialogContentHead = `\n      <div>Select Cards to Discard:</div>\n      <form>`;\n  let dialogOptions = \"\";\n  let dailogContentFooter = `</form>`;\n\n  let hand = game.cards.getName(handName);\n  hand.data.cards.forEach(function(element) { \n    dialogOptions = dialogOptions + `\n      <div class=\"form-group\">\n      <input type=\"checkbox\" value=\"${element.data._id}\">${element.data.name}</input>\n      </div>`;\n  });\n\n  dialogOptions = dialogOptions + `\n        <div class=\"form-group\">\n          Draw How many cards: \n          <select id=\"select-type\" name=\"select-type\">\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n              <option value=\"6\">6</option>\n              <option value=\"7\">7</option>\n          </select>\n        </div>`;\n  dialogContent = dialogContentHead + dialogOptions + dailogContentFooter;\n\n  new Dialog({\n    title: `Draw Cards`,\n    content: dialogContent,\n    buttons: {\n      yes: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Draw`,\n        callback: () => applyChanges = true\n      },\n      no: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel`\n      },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n          let nCardsToDraw = html.find('[name=\"select-type\"]')[0].value || null;\n          let cardsToDiscard = $('input[type=checkbox]:checked').map((i, el) => el.value).get();\n          //let cardsToDiscard = html.find('[name=\"selected-card\"]')[0].value || null;\n          const discardCardMacro = game.macros.getName(\"Discard Cards As Character\");\n          discardCardMacro.execute(handName, discardName, cardsToDiscard, game.user.character.name);\n          const dealCardMacro = game.macros.getName(\"Deal Card As Character\");\n          dealCardMacro.execute(deckName,\n                                handName,\n                                game.user.character.name + \" attempted to draw \" + nCardsToDraw + \" cards.\",\n                                game.user.character.name,\n                                false,\n                                nCardsToDraw);\n        }\n      }\n  }).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"core":{"sourceId":"Macro.elWp1tP1coWJUHIH"}},"_id":"XRwzdqiyn9Utg1Yx"}
{"$$deleted":true,"_id":"XRwzdqiyn9Utg1Yx"}
{"$$deleted":true,"_id":"sa5kz12AKiOgj0yZ"}
{"name":"Resolve Take A Drink","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Shuffles the given deck.\n * @param {string}      characterActingAs  The name of the character paying Gold.\n * @param {string}      userIDActingAs     The name of the character or game to which the character is sending Gold .\n * @param {int}         numGold            The number of Gold pieces to send.\n */\n// resolveTakeADrink(characterActingAs, userIDActingAs)\n// Macro Name: Resolve Take A Drink\n// Run As GM: true\n// Has Widget: false\n\nconst gameName = \"The Inn\"\nconst mainDeckBaseName = 'Main';\nconst drinkDeckBaseName = 'Drink';\nconst discardDeckSuffix = 'Discard';\nconst deckSuffix = 'Deck';\n\nif (args.length < 2) {\n  console.log(`[${gameName}] Error: resolveTakeADrink was called with too few arguments:`);\n  console.log(`[${gameName}] Requires: resolveTakeADrink(characterActingAs, userIDActingAs);`);\n  console.log(`[${gameName}] Got: resolveTakeADrink(${args.toString()})`);\n} else {\n  const characterActingAs = args[0];\n  const userIDActingAs = args[1];;\n \n  const passFromDeckName = `${characterActingAs} ${drinkDeckBaseName} ${deckSuffix}`;\n  const toDeckName = `${characterActingAs} ${drinkDeckBaseName} ${discardDeckSuffix}`\n  const passFromDeck = game.cards.getName(passFromDeckName);\n  const discardDeck = game.cards.getName(toDeckName);\n  const passFromDeckCards = passFromDeck.data.cards;\n  if (passFromDeckCards.contents.length > 0) {\n    const cardId = passFromDeckCards.contents[passFromDeckCards.contents.length - 1].id;\n    let playedCard = await discardDeck.draw(passFromDeck, 1, {action: \"play\", chatNotification: false});\n    const newCount = passFromDeck.data.cards.contents.length;\n    ChatMessage.create({\n      user: userIDActingAs,\n      content: `<div>${characterActingAs} took a drink: ${playedCard[0].name}.</div><div>New ${passFromDeckName} Count: ${newCount}</div>`,\n    });\n    const cardImg = playedCard[0].img;\n    const calledMacro = await game.macros.getName(\"Update Tile Image\");\n    await calledMacro.execute(cardImg,\"Drink\",characterActingAs);\n  } else {\n    ChatMessage.create({\n      user: userIDActingAs,\n      content: `<div> No cards to play in ${passFromDeckName}</div><div>Count: ${passFromDeckCards.contents.length}</div>`,\n    });\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"advanced-macros":{"runAsGM":true}},"_id":"3pXnLKzdXSKbhuq2"}
{"name":"Shuffle Deck","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Shuffles the given deck.\n * @param {object} deckName  The name of the deck to shuffle.\n * @returns Promise          All macros return promise.\n */\n\n// shuffleDeck(deckName)\nlet gameName = \"The Inn\";\n\nif (args.length < 1) {\n  console.log(`${gameName} | Error: shuffleDeck was called with too few arguments:`);\n  console.log(`${gameName} | Requires: shuffleDeck(deckName);`);\n  console.log(`${gameName} | Got: shuffleDeck(${args.toString()});`);\n} else {\n  const deckName = args[0];\n  const deckInstance = game.cards.getName(deckName);\n  await deckInstance.shuffle();\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"advanced-macros":{"runAsGM":true}},"_id":"JmT3bPgTCsGuh6YM"}
{"name":"Discard Cards As Character","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Discards Cards for a Character.\n * @param {string}      handName           The name of the deck to draw from.\n * @param {string}      discardDeckName    The name of the deck to send to.\n * @param {array}       idsOfCards         An array of the card IDs to discard.\n * @param {string}      characterActingAs  The name of the character that is requesting the deal.\n */\n// discardCardsAsCharacter(handName, discardDeckName, idsOfCards, characterActingAsName)\n// Macro Name: Discard Cards As Character\n// Run As GM: true\n// Has Widget: false\n\nconst gameName = \"The Inn\"\nconst mainDeckBaseName = 'Main';\nconst drinkDeckBaseName = 'Drink';\nconst discardDeckSuffix = 'Discard';\nconst deckSuffix = 'Deck';\n\nconsole.log(`${gameName} | Discard Cards As Character`);\n\n\nif (args.length < 3) {\n  console.log(`${gameName} | Error: discardCardsAsCharacter was called with too few arguments:`);\n  console.log(`${gameName} | Requires: discardCardsAsCharacter(handName, discardDeckName, idsOfCards, characterActingAsName);`);\n  console.log(`${gameName} | Got: discardCardsAsCharacter(${args.toString()})`);\n} else {\n  const handName = args[0];\n  const discardDeckName = args[1];\n  const idsOfCards = args[2];\n  const characterActingAsName = args[3];\n \n  const fromDeck = game.cards.getName(handName);\n  const toDeck = game.cards.getName(discardDeckName);\n  let playedCard = await fromDeck.pass(toDeck, idsOfCards, {chatNotification: false});\n  const selectedUserIDs = game.users\n                                 .filter(d=>typeof d.character !== 'undefined')\n                                 .filter(d=>d.character.name === characterActingAsName)\n                                 .map(d=>d.id);\n\n  if (selectedUserIDs.length > 0) {\n    let userIDActingAs = selectedUserIDs[0];\n    ChatMessage.create({\n      user: userIDActingAs,\n      content: `<div>${characterActingAsName} discarded ${idsOfCards.length} cards`,\n    });\n  } else {\n    ChatMessage.create({\n      content: `<div>${characterActingAsName} discarded ${idsOfCards.length} cards`,\n    });\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"advanced-macros":{"runAsGM":true}},"_id":"IQ6UB55I4YQcG0qO"}
{"name":"Update Character Stat","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Updates the text of a Text Drawing object.  This makes use of Tagger.\n * @param {int}         amount         The amount by which to increase stat.\n * @param {array}       statTag        The array of tags to filter on (e.g. [\"Fortitude\"]).\n * @param {string}      characterName  The character whose stat needs updating.\n * @param {bool}        chatNotify     Whether chat should notify (defaults to true).\n * @returns Promise          All macros return promise.\n */\n\n// TODO: This only supports one stat at a time.  Need to update multiple stats on matching tags.\n\n// updateCharacterStat(amount, [statTags], characterName)\n// Macro Name: Update Character Stat\n// Run As GM: true\n// Has Widget: false\n\nlet gameName = \"The Inn\";\nlet chatNotify = true;\n\nconsole.log(`${gameName} | Update Character Stat`)\n\nif (args.length < 3) {\n  console.log(`${gameName} | Error: updateCharacterStat was called with too few arguments:`);\n  console.log(`${gameName} | Requires: updateCharacterStat(amount, [statTag], characterName);`);\n  console.log(`${gameName} | Got: updateCharacterStat(\"${args.toString()});`);\n} else {\n  const amount = args[0];\n  const characterName = args[2];\n  const statTag = args[1];\n  if (args.length > 3) {\n    chatNotify = args[3];\n  }\n  const playerStat = Tagger.getByTag([\"Stats\", statTag, characterName]);\n  if (playerStat.length > 0) {\n    const playerStatText = playerStat[0].data.text.split(\" \");\n    const playerStatTitle = playerStatText[0];\n    const playerStatAmount = playerStatText.slice(-1)[0];\n\n    const newStatValue = parseInt(playerStatAmount) + parseInt(amount);\n\n    let updates = await playerStat.map(i=>({_id:i.id,text:`${playerStatText[0]} ${newStatValue}`}));\n    canvas.scene.updateEmbeddedDocuments(\"Drawing\",updates);\n    if (chatNotify) {\n      const selectedUserIDs = game.users\n                                    .filter(d=>typeof d.character !== 'undefined')\n                                    .filter(d=>d.character.name === characterName)\n                                    .map(d=>d.id);\n\n      if (selectedUserIDs.length > 0) {\n        let userIDActingAs = selectedUserIDs[0];\n        ChatMessage.create({\n          user: userIDActingAs,\n          content: `<div>${characterName} adjusted ${statTag} by ${amount} to ${newStatValue}.</div>`,\n        });\n      } else {\n        ChatMessage.create({\n          content: `<div>${characterName} adjusted ${statTag} by ${amount} to ${newStatValue}.</div>`,\n        });\n      }\n    }\n  } else {\n    console.log(`${gameName} | Error: Unable to find stat with tags ${statTag}, ${characterName}`)\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"advanced-macros":{"runAsGM":true}},"_id":"q6Oh9Z6E8Rfo9HVm"}
{"name":"Update Tile Image","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Updates a Card tile based off its tags.\n * @param {string}       img       The string of the image to update the tile to show\n * @param {string}       slotType  The tag that indicates the type of slot (e.g., \"Drink\", \"Main\")\n * @param {string}       slotOwner The tag that indicates the name of the character that owns the slot\n */\n\n// updateTileImage(img, slotType, slotOwner)\n// Macro Name: Update Tile Image\n// Run As GM: true\n// Has Widget: false\n\nif (typeof args !== 'undefined') {\n  const img = args[0];\n  const slotType = args[1];\n  const slotOwner = args[2];\n  console.log(slotType);\n  console.log(slotOwner);\n  console.log(img);\n  const taggedTileDocs = Tagger.getByTag([\"Tile\",slotType,slotOwner]);\n  let updates = await taggedTileDocs.map(i=>({_id:i.id,img:args[0]}));\n  canvas.scene.updateEmbeddedDocuments(\"Tile\",updates);\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"advanced-macros":{"runAsGM":true}},"_id":"k53TkXmDU3HxLVmE"}
{"name":"Deal Card As Character","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Shuffles the given deck.\n * @param {string}      fromDeckName           The name of the deck to draw from.\n * @param {string}      toDeckName             The name of the deck to send to.\n * @param {string}      chatText               The text to send to Chat.\n * @param {string}      characterActingAsName  The name of the character that is requesting the deal.\n * @param {bool}        toTop                  Whether the card should be dealt to the top of the target deck.\n * @param {int}         numCards               The number of cards to draw.\n */\n// dealCardAsCharacter(characterActingAs, userActingAs, chatText, characterActingAs, userActingAs)\n// Macro Name: Deal Card As Character\n// Run As GM: true\n// Has Widget: false\n\nconst gameName = \"The Inn\"\nconst mainDeckBaseName = 'Main';\nconst drinkDeckBaseName = 'Drink';\nconst discardDeckSuffix = 'Discard';\nconst deckSuffix = 'Deck';\n\nconsole.log(`${gameName} | Deal Card As Character`);\n\nlet numCards = 1;\nlet chatText = '';\n\nif (args.length < 2) {\n  console.log(`${gameName} | Error: dealCardAsCharacter was called with too few arguments:`);\n  console.log(`${gameName} | Requires: dealCardAsCharacter(fromDeckName, toDeckName, chatText, characterActingAsName, toTop, numCards);`);\n  console.log(`${gameName} | Got: dealCardAsCharacter(${args.toString()})`);\n} else {\n  if (args.length > 5) numCards = args[5];\n  const fromDeckName = args[0];\n  const toDeckName = args[1];\n  const chatText = args[2];\n  const characterActingAsName = args[3];\n  const toTop = args[4];\n \n  const fromDeck = game.cards.getName(fromDeckName);\n  let toDeck = game.cards.getName(toDeckName);\n  const fromDeckCards = fromDeck.data.cards;\n\n  const selectedUserIDs = game.users\n                                .filter(d=>typeof d.character !== 'undefined')\n                                .filter(d=>d.character.name === characterActingAsName)\n                                .map(d=>d.id);\n\n  if (fromDeckCards.contents.length > 0) {\n    if (fromDeckCards.contents.length < numCards) numCards = fromDeckCards.contents.length;\n    let valArray = toDeck.data.cards.map(f => f.data.sort);\n    let lowest = Math.min.apply(null,valArray);\n    let highest = Math.max.apply(null,valArray);\n    let playedCard = await toDeck.draw(fromDeck, numCards, {action: \"play\", chatNotification: false});\n    playedCard[0].data.sort = highest + 1;\n    const newFromCount = fromDeck.data.cards.contents.length;\n    const newToCount = toDeck.data.cards.contents.length;\n\n    // Move drawn card to the top.\n    if (toTop) {\n      toDeck = game.cards.getName(toDeckName);\n      valArray = toDeck.data.cards.map(f => f.data.sort);\n      lowest = Math.min.apply(null,valArray);\n      highest = Math.max.apply(null,valArray);\n\n      toDeck.data.cards.forEach(function(f) {\n        if (f.data.sort == highest) {\n          f.data.sort=lowest;\n        } else {\n          f.data.sort = f.data.sort + 1;\n        }\n      });\n\n    }\n    if (selectedUserIDs.length > 0) {\n      let userIDActingAs = selectedUserIDs[0];\n      ChatMessage.create({\n        user: userIDActingAs,\n        content: `<div>${chatText}</div>\n                  <div>${fromDeckName} has ${newFromCount} left</div>\n                  <div>${toDeckName} now has ${newToCount}`,\n      });\n    } else {\n      ChatMessage.create({\n        content: `<div>${chatText}</div>\n                  <div>${fromDeckName} has ${newFromCount} left</div>\n                  <div>${toDeckName} now has ${newToCount}`,\n      });\n    }\n  } else {\n    if (selectedUserIDs.length > 0) {\n      let userIDActingAs = selectedUserIDs[0];\n      ChatMessage.create({\n        user: userIDActingAs,\n        content: `<div>${fromDeckName} has no more cards!</div>`,\n      });\n    } else {\n      ChatMessage.create({\n        content: `<div>${fromDeckName} has no more cards!</div>`,\n      });\n    }\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"advanced-macros":{"runAsGM":true}},"_id":"vFkXoGC1zr992Ivn"}
{"name":"Collect Discards","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Collects discards for a pile\n * @param {string}   deckName         The name of the deck to collect for (e.g. \"The Inn Drink Deck\").\n * @param {string}   discardPileName  The name of the deck to collect for (e.g. \"The Inn Drink Discard\").\n */\n\n// collectDiscards(deckName, discardPileName)\n// Macro Name: Collect Discards\n// Run As GM: true\n// Has Widget: false\n\nif (args.length < 2) {\n  console.log(\"Error: collectDiscards was called with too few arguments:\");\n  console.log(\"Requires: collectDiscards(deckName, discardPileName);\");\n  console.log(\"Got: collectDiscards(\" + args.toString() + \");\");\n} else {\n  const deckName = args[0];\n  const discardPileName = args[1];\n  const deckInstance = game.cards.getName(deckName);\n  const discardInstance = game.cards.getName(discardPileName);\n  const passFromCount = discardInstance.data.cards.contents.length;\n  if (passFromCount > 0) {\n    const passedCards = await discardInstance.deal([deckInstance], passFromCount, {down: false, how: 2});\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"advanced-macros":{"runAsGM":true}},"_id":"hpIM5Z46iwSfzcpT"}
{"name":"Resolve Pay Gold","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Resolves the Pay Gold macro.  The pot name should be a tag for the Text Drawing Object of form 'Name: Number',\n *  e.g., \"Pot: 0\".\n * @param {string}      characterActingAsName  The name of the character paying Gold.\n * @param {string}      targetName         The name of the character or game to which the character is sending Gold .\n * @param {int}         numGold            The number of Gold pieces to send.\n */\n// resolvePayGold(characterActingAsName, targetName, amountToPay)\n// Macro Name: Resolve Pay Gold\n// Run As GM: true\n// Has Widget: false\n\nconst gameName = \"The Inn\";\nconst potName = \"Pot\";\n\nconsole.log(`${gameName} | Resolve Pay Gold`);\n\nif (args.length < 3) {\n  console.log(`${gameName} | Error: resolvePayGold was called with too few arguments:`);\n  console.log(`${gameName} | Requires: resolvePayGold(characterActingAsName, targetName, amountToPay);`);\n  console.log(`${gameName} | Got: resolvePayGold(${args.toString()})`);\n} else {\n  const characterActingAsName = args[0];\n  const targetName = args[1];\n  const numGold = parseInt(args[2]);\n\n  let statMacro = game.macros.getName(\"Update Character Stat\");\n  await statMacro.execute(-numGold,\"Gold\",characterActingAsName, false);\n  if (targetName !== gameName && targetName !== potName) await statMacro.execute(numGold,\"Gold\",targetName, false);\n  if (targetName === potName) await statMacro.execute(numGold,\"Pot\",\"Global\",false);\n  const selectedUserIDs = game.users\n                                .filter(d=>typeof d.character !== 'undefined')\n                                .filter(d=>d.character.name === characterActingAsName)\n                                .map(d=>d.id);\n  if (selectedUserIDs.length > 0) {\n    let userIDActingAs = selectedUserIDs[0];\n    ChatMessage.create({\n      user: userIDActingAs,\n      content: `<div>${characterActingAsName} paid ${numGold} Gold to ${targetName}</div>`,\n    });\n  } else {\n    ChatMessage.create({\n      content: `<div>${characterActingAsName} paid ${numGold} Gold to ${targetName}</div>`,\n    });\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"advanced-macros":{"runAsGM":true}},"_id":"3xpaN2wqXl2bK5kO"}
{"name":"Resolve Collect Pot","type":"script","author":"M7U6gTcRxrZdKiAj","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Resolves the Collect Pot macro.  The pot name should be a tag for the Text Drawing Object of form 'Name: Number',\n *  e.g., \"Pot: 0\".\n * @param {string}      characterActingAsName  The name of the character paying Gold.\n */\n// resolveCollectPot(characterActingAsName)\n// Macro Name: Resolve Pay Gold\n// Run As GM: true\n// Has Widget: false\n\nconst gameName = \"The Inn\";\nconst potName = \"Pot\";\n\nconsole.log(`${gameName} | Resolve Collect Pot`);\n\nif (args.length < 1) {\n  console.log(`${gameName} | Error: resolveCollectPot was called with too few arguments:`);\n  console.log(`${gameName} | Requires: resolveCollectPot(characterActingAsName);`);\n  console.log(`${gameName} | Got: resolveCollectPot(${args.toString()})`);\n} else {\n  const characterActingAsName = args[0];\n\n  let goldDrawing = Tagger.getByTag([\"Stats\", \"Gold\", \"Drawing\", \"Pot\", \"Global\"]);\n  if (goldDrawing.length > 0) {\n    const goldDrawingText = goldDrawing[0].data.text.split(\" \");\n    const goldAmount = goldDrawingText[1];\n\n    let statMacro = game.macros.getName(\"Update Character Stat\");\n    await statMacro.execute(goldAmount,\"Gold\",characterActingAsName, false);\n    await statMacro.execute(-goldAmount,\"Pot\",\"Global\",false);\n    const selectedUserIDs = game.users\n                                  .filter(d=>typeof d.character !== 'undefined')\n                                  .filter(d=>d.character.name === characterActingAsName)\n                                  .map(d=>d.id);\n    if (selectedUserIDs.length > 0) {\n      let userIDActingAs = selectedUserIDs[0];\n      ChatMessage.create({\n        user: userIDActingAs,\n        content: `<div>${characterActingAsName} paid ${numGold} Gold to ${targetName}</div>`,\n      });\n    } else {\n      ChatMessage.create({\n        content: `<div>${characterActingAsName} paid ${numGold} Gold to ${targetName}</div>`,\n      });\n    }\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"M7U6gTcRxrZdKiAj":3},"flags":{"advanced-macros":{"runAsGM":true}},"_id":"S1TnRH22QLMe3cy7"}
